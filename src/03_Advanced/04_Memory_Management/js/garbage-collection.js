/* ガベージコレクション */
(function(){
  'use strict';

  /* 参照カウントのガベージコレクション */
  var o = {
    a: {
      b: 2
    }
  };
  // どちらのオブジェクトもガベージコレクションの対象にならない

  var o2 = o;
  // 'o2' がオブジェクトを参照するようになったので、
  // 参照カウントが 2 になった

  o = 1;
  // 'o' はもうオブジェクトを参照しない
  // 参照するのは 'o2' だけになった
  console.log('o2', o2);

  var oa = o2.a;
  // a に代入されているオブジェクトの参照カウントは 2 になった

  o2 = 'yo';
  // もともと 'o' に代入されていたオブジェクトを参照するものはいなくなった
  // このため、このオブジェクトはガベージコレクションの対象となる
  // しかしプロパティ 'a' のオブジェクトはまだ変数 'oa' が参照しているので開放できない
  console.log('oa', oa);

  oa = null;
  // 'o' に代入されていたオブジェクトのプロパティ 'a' が指していた
  // オブジェクトへの参照が一つも無くなったので、ガベージコレクションの対象となる

  // 限界: 循環
  function f(){
    var o = {};
    var o2 = {};
    o.a = o2; // o references o2
    o2.a = o; // o2 references o

    return "azerty";
  }
  f();
  // 'o' と 'o2' は関数の呼び出し後にスコープを外れるため、開放してもかまわないはず
  // しかし、参照カウントアルゴリズムはそれぞれ少なくとも１回参照されているため、
  // どちらもガベージコレクトできないと見なす


  // 近代的なブラウザーでは、マークアンドスイープ式のガベージコレクタなので、
  // 循環はもはや問題ではない
})();
